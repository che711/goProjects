package utils

import (
	"bufio"
	"fmt"
	"os"
)

func Reverse(s string) string {
	runes := []rune(s)
	for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {
		runes[i], runes[j] = runes[j], runes[i]
	}
	return string(runes)
}

func JustCode() {
	// –ø—Ä–æ—Å—Ç–æ–π –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

	/*
		–î–ª—è —á–µ–≥–æ –Ω—É–∂–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:
			–î–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ –∫–æ–¥–∞.
			–î–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∏ –∏—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.
			–î–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ–¥–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ.
	*/

	//fmt.Print("Many\n")
	//fmt.Print("Thanks\n")
	//fmt.Print("To")
	//fmt.Print("All")
	//fmt.Print("My")
	//fmt.Print("Students")
	//
	//fmt.Print("\n")
	//fmt.Println("Hello", "my", "dear", "friends")

	/*
		// 1 –≤–∞—Ä–∏–∞–Ω—Ç
		const a = "—Å—Ç—Ä–æ–∫–∞"
		//a = 'test_msg'
		fmt.Println(a)

		// 2 –≤–∞—Ä–∏–∞–Ω—Ç
		var b, c, d string // –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ""
		fmt.Println(b, c, d)

		// 3 –≤–∞—Ä–∏–∞–Ω—Ç
		f, e := "new_test", "test"
		fmt.Println(e)
		fmt.Println(f)
	*/

	var text string = "string"
	fmt.Println(text)

	var b int = 123123123
	fmt.Println(b)
	var c int8 = 123
	fmt.Println(c)
	var d int16 = 1234
	fmt.Println(d)
	var e int32 = 123123123
	fmt.Println(e)
	var f int64 = 123123123123
	fmt.Println(f)

	var g uint = 999
	fmt.Println(g)
	var h uint8 = 100
	fmt.Println(h)
	var i uint16 = 1000
	fmt.Println(i)
	var j uint32 = 10000
	fmt.Println(j)
	var k uint64 = 10000000
	fmt.Println(k)

	var l float32 = 1000.0
	fmt.Println(l)
	var m float64 = 9999.123123123
	fmt.Println(m)

	var n complex64 = 100 + 100i
	fmt.Println(n)
	var o complex128 = 1000 + 1000i
	fmt.Println(o)

	var yes bool = true
	fmt.Println(yes)
	var no bool = false
	fmt.Println(no)
	fmt.Println("\n")

	someEmojis := "üòÄ üòÉ üòÑ üòÅ üòÜ üòÖ üòÇ ü§£"
	someHieroglyphs := "ìÄÄ ìÄÅ ìÄ≤ ìÄï ìÄñ ìÄó ìÄò ìÄô "
	hieroglyph := 'ìÄô' // –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏!!

	fmt.Println(someEmojis)
	fmt.Println("\n")
	fmt.Println(someHieroglyphs)
	fmt.Println("\n")
	fmt.Println(hieroglyph)
	fmt.Println("\n")

	// –ë–∞–∑–æ–≤—ã–µ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ) —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
	basicTypes := []interface{}{
		// –õ–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–∏–ø
		false,
		// –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ (—Å–æ –∑–Ω–∞–∫–æ–º)
		int(0), int8(0), int16(0), int32(0), int64(0),
		// –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ (–±–µ–∑ –∑–Ω–∞–∫–∞)
		uint(0), uint8(0), uint16(0), uint32(0), uint64(0), uintptr(0),
		// –ß–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
		float32(0.0), float64(0.0),
		// –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —á–∏—Å–ª–∞
		complex64(0 + 0i), complex128(0 + 0i),
		// –°—Ç—Ä–æ–∫–∏
		"",
		// –°–∏–º–≤–æ–ª (—Ä—É–Ω–∞)
		rune('a'),
		// –ü—Å–µ–≤–¥–æ–Ω–∏–º byte (—Ç–æ –∂–µ, —á—Ç–æ uint8)
		byte('a'),
	}

	// –í—ã–≤–æ–¥–∏–º —Ç–∏–ø—ã
	fmt.Println("=== –ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ Go ===")
	for _, v := range basicTypes {
		fmt.Printf("%T\n", v)

	}

	// –°–æ—Å—Ç–∞–≤–Ω—ã–µ –∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã (–∏—Ö –Ω–µ–ª—å–∑—è –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞—Ç—å –≤ —Å–ø–∏—Å–∫–µ)
	fmt.Println("\n=== –°–æ—Å—Ç–∞–≤–Ω—ã–µ –∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã ===")
	fmt.Println("- –ú–∞—Å—Å–∏–≤—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, [3]int)")
	fmt.Println("- –°—Ä–µ–∑—ã ([]int)")
	fmt.Println("- –°—Ç—Ä—É–∫—Ç—É—Ä—ã (struct { ... })")
	fmt.Println("- –£–∫–∞–∑–∞—Ç–µ–ª–∏ (*int)")
	fmt.Println("- –§—É–Ω–∫—Ü–∏–∏ (func())")
	fmt.Println("- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã (interface{})")
	fmt.Println("- –ö–∞–Ω–∞–ª—ã (chan int)")
	fmt.Println("- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (map[string]int)")

	fmt.Println("\n")
	var symbol rune = 'A'
	fmt.Println(symbol)
}

func LearningScan() {
	var word1, word2 string

	fmt.Println("–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —Å–ª–æ–≤–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º:")

	/*
		c—á–∏—Ç—ã–≤–∞–µ—Ç –¥–≤–∞ —Å–ª–æ–≤–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
		c–∏–º–≤–æ–ª –∞–º–ø–µ—Ä—Å–∞–Ω–¥ (&) –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–µ —Ç–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ ->
		—á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é X, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é fmt.Scan() —Å –∞–º–ø–µ—Ä—Å–∞–Ω–¥–æ–º (&) –ø–µ—Ä–µ–¥ –Ω–µ–π.
	*/

	fmt.Scan(&word1, &word2)

	fmt.Println("–í—ã –≤–≤–µ–ª–∏:", word1, word2)
}

func Bufio() {
	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π reader —á—Ç–æ–±—ã —Å—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
	reader := bufio.NewReader(os.Stdin)

	fmt.Println("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:")

	// –°—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–æ —Å–∏–º–≤–æ–ª–∞ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è Enter
	input, _ := reader.ReadString('\n')

	// –í—ã–≤–æ–¥–∏–º —Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
	fmt.Println("–í—ã –≤–≤–µ–ª–∏:", input)
}

func Exam() {
	reader := bufio.NewReader(os.Stdin)
	input, _ := reader.ReadString('\n')
	fmt.Println(input)
}
